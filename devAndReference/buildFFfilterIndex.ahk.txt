; buildFFfilterListIndex scans all .ffxml files in the installed Filter Forge library path and also user library path for the names of those filters, and writes them to a text file FFfilterList.txt as a delimeter marked list: filtername|__|theFilters-ffxmlfilename.ffxml. The unusual delimiter is necessary because many kinds of characters including commas may be present in filter names; |__| is not going to appear in any of them (which would confuse the list parser), or if it is, that's SOL for that filter creator/user.

; TO DO: Fix bug of filter indexing hanging on index of filter with more than one space in the name; it is a regex problem; either find a regex needle that consistently works, or (better), use a much better and specific (e.g. gnuWin32 tool) for the job.

				;Development only:
				FileDelete, %A_ScriptDir%\FFfilterList.txt
				FileDelete, %A_ScriptDir%\FFuserFilterList.txt
; NOTE: if you compile this as a standalone application, uncomment the next three lines. If necessary. It might not be.
; #NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

buildFFfilterListIndex() {
	; ===== START GLOBALS (or they would be if this program is compiled as a standalone ============

	; NOTE: Although this script is meant to be included inline into ffBatch.ahk, it does not work properly unless the globals it uses are created local to this script (notwithstanding those variables are created in ffBatch.ahk). JUST IN CASE there are variable/value conflicts, though, I use different variable names here.

	; SET INI FILENAME
	EnvGet, ComputerNameInclude, COMPUTERNAME
	iniFileName=%A_ScriptDir%\ffBatch_%ComputerNameInclude%.ini
	; ===== END GLOBALS (or they would be if this program is compiled as a standalone ==============

	; ==== DO STUFF! LIKE BART DOES! ====
		; READ INI FILE VALUES INTO LOCAL VALUES.
		;Reference: IniRead, OutputVar, Filename, Section, Key [, Default]
		IniRead, filtersLibraryPathInclude, %iniFileName%, Paths, Filters Library Path
		IniRead, myFiltersPathInclude, %iniFileName%, Paths, My Filters Path

		FileRead, ffxmlContentString, %filtersLibraryPathInclude%\%filterFileName%
		FileRead, ffxmlContentString, %myFiltersPathInclude%\\%filterFileName%

	; CHECK IF INSTALLED FILTER list exists.
		IfExist, %A_ScriptDir%\FFfilterList.txt
			{
					; MsgBox, installed filter list exists.
			filtersLibraryPathIncludeFileExists = 1
			}
			Else
			{
			filtersLibraryPathIncludeFileExists = 0
			}
	; CHECK IF USER FILTER list exists.
		IfExist, %A_ScriptDir%\FFuserFilterList.txt
			{
					; MsgBox, user filter list exists.
			myFiltersPathIncludeFileExists = 1
			}
			Else
			{
			myFiltersPathIncludeFileExists = 0			}
			

	;If (%filtersLibraryPathIncludeFileExists% == 0)
	;{
					SplashImage,, b1 cw008000 ctffff00, Building index of installed Filter Forge filters . . .
		; REPEAT THAT FOR USER FILTERS: FIND NAMES OF ALL USER CUSTOM FILTERS
				; These need to be in separate arrays, and printed to different file names for clairty.
				; Don't need to create a new regex needle; use what we already have.
		FFinstalledFiltersFileNameArray := Object()
		; GET LONGEST FILTER NAME:
		longestFilterNameCount = 0
		installedFiltersCount = 0
		Loop, %filtersLibraryPathInclude%\*.ffxml
		{
			; FIND the length of the longest filter name while we're at it.
			StringLen, strLength, A_LoopFileName
			If (strLength > longestFilterNameCount) {
			longestFilterNameCount = %strLength%
			}
			installedFiltersCount += 1
			FFinstalledFiltersFileNameArray.Insert(A_LoopFileName)
		}
					SplashImage, Off
					SplashImage,, b1 cw008000 ctffff00, Building index of %installedFiltersCount% installed Filter Forge filters . . .`; this may take a long time`, depending . . .
		FFinstalledFiltersFileNameCSV_Array := Object()
		indexedFilters = 0
		for index, element in FFinstalledFiltersFileNameArray
		{
		;IF (%IndexedFiltersDisplay% == 0)
		;	{
			;SplashImage,, b1 cw008000 ctffff00, Building index of %installedFiltersCount% installed Filter Forge filters . . .`; this may take a long time`, depending . . . %indexedFilters% indexed`, indexing %element% . . .
		;	}
		; ==== USEFUL NOTES ====
				; To print matches in quotes, eg. in: name-en="Steampunk Panel Round" using sed from gnuWin32 coreutils:
				; An intermediare success:
				; sed -n s/.*name-en=""""\(.*\)"""".*/\1/p < testSed.txt
				; SEE THE INSANITY: you must *double-escape* quote marks between dos and sed!
				; SUCCESS extracting filter name from .ffxml file with one gnuWin32 sed command. This was done by escaping quotes meant for sed in both DOS *and* sed (it seems?) via """", and ^ via DOS ^^ and quotes meant for sed as a character to negate with ^ (via DOS ^^) as "" (which makes no flipping sense to me!) :
				; sed -n s/.*name-en=""""\([^^""]*\)"""".*/\1/p < textProcessingTest.txt
				; maybe delete these next two lines:
				; FileRead, haystack, %filtersLibraryPathInclude%\%element%
				; FileRead, haystack, %myFiltersPathInclude%\%element%
		FileDelete, filterScanTemp.txt
		sedCommand = sed -n s/.*name-en=""""\([^^""]*\)"""".*/\1/p < "%filtersLibraryPathInclude%\%element%" > filterScanTemp.txt
		RunWait, %comspec% /C "%sedCommand%", %workingDirectory%, Hide
		FileRead, filterName, filterScanTemp.txt
		filterName := varize(filterName)		;uses that function to remove freaky characters in filter names, and also to replace spaces with underscores, so that they are easy to select with a double-click in a text editor (for copying/pasting etc.)
				; MsgBox, filterName value is:`n`n%filterName%
						; crossing fingers to deprecate:
						; FFinstalledFiltersFileNameCSV_Array.Insert(filterName)
		; Assuming four spaces are equal to the distance of one tab, create string of tabs equal to the nearest even divisor of 4 in the length of the longest filter name:
		tabsToAlignTo := Round(longestFilterNameCount/4, 0)
				; MsgBox, tabsToAlignTo`n%tabsToAlignTo%
		StringLen, strLength, filterName
		extraTabsForAlign := longestFilterNameCount - strLength
				; MsgBox, extraTabsForAlign`n%extraTabsForAlign%
		extraSpaceCheck := Mod(extraTabsForAlign, 4)
		If (extraSpaceCheck == 1)
			{
			extraTabsForAlign += 1
			}
		totalTabs := extraTabsForAlign + tabsToAlignTo
		loopCount = 0
		string_tabsAfterFilterName =
		Loop,
		{
		loopCount += 1
		string_tabsAfterFilterName := %string_tabsAfterFilterName%\t
		If (loopCount == totalTabs)
			break
		}
		FileAppend, %tempString%, FFfilterList.txt
		SplashImage, Off
		indexedFilters += 1
		}
		FileDelete, filterScanTemp.txt
	SplashImage, Off
	;}


	; ==== END DO STUFF! LIKE BART DOES! ====

; Accurate creation of filter name|ffxml filename lists creation DONE, 09/06/2015 12:18:13 AM. Good night. -RAH

	If (%filtersLibraryPathIncludeFileExists% == 0 || %myFiltersPathIncludeFileExists% == 0)
	{
	;SplashImage,, b1 cw008000 ctffff00, Done building list of installed and user Filter Forge filters.
	Sleep, 1725
	SplashImage, Off
	}
}